import java.io.File
import javax.swing.event._
import processing.core._
import com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex
import javax.sound.sampled._
import Sounds._

object SlapEmAll extends PApplet {
  
  val squareSize = 100
  val gameWorld = new World
  val player = new Player(gameWorld)
  val levels = new Levels
  
  private var stage = 0                                 //Stage 0 is the menu
  private var endScreen = false                         //Tells whether the endScreen has been drawn once or not (used when the game ends)
  
  val squares = gameWorld.BoardSize
  val gridSize = squares * squareSize
  val middle = squares / 2
  
  /*
   * All the sprites for the game are loaded
   */
  private val mPic = loadImage("mermaidPic_burned.png")
  private val pPic = loadImage("piraattiPicture_burned.png")
  private val dPic = loadImage("dockPicture.png")
  private val sPic = loadImage("seaPicture.png")
  private val startPic = loadImage("startscreen.jpg")
  private val mAttackLeft = loadImage("mermaidPic_left.png")
  private val mAttackUp = loadImage("mermaidPic_up.png")
  private val mAttackRight = loadImage("mermaidPic_right.png")
  private val mAttackDown = loadImage("mermaidPic_down.png")
  private val cannedMermaidPic = loadImage("endingPic.png")
  private val winningScreen = loadImage("winningscreen.png")
  
  override def setup() : Unit = {
    size(gridSize, gridSize)
    frameRate(30)
    
  }

  /*
   * Checks in which stage the game is currently and draws the window accordingly.
   */
  override def draw() : Unit = {
    if (!gameWorld.hasLost && !gameWorld.hasWon) {
      stage match {
        case 0 => {
          drawStart
          this.checkIfLevelButton
        }
        case 1 => {
          levels.stageOne()
          drawBoard
        }
        case 2 => {
          levels.stageTwo()
          drawBoard
        }
        case 3 => {
          levels.stageThree()
          drawBoard
        }
        case _ => None
      }

      player.timeFromLastHit -= 1
    } else {                                                          //if the game has ended
        if (!endScreen) {                                             // checks whether an endScreen (winning or losing) has been drawn
          if(gameWorld.hasLost) drawEnd else drawWin
          pirate.stop()
          pirate.setFramePosition(0)
          bitPirate.stop()
          bitPirate.setFramePosition(0)
          speedUpPirate.stop()
          speedUpPirate.setFramePosition(0)
          if(gameWorld.hasWon) winPlayer() else losePlayer()
        }
        endScreen = true                                              // when the endscreen has already appeared, moves to apply the checkIfRestartButton-method
        this.checkIfRestartButton
    }
  }
  
  /* 
   * Draws the welcome screen where the player sees the instructions
   * and can choose a level to play.
   */
  private def drawStart = {
    val font = createFont("Arial Black", 100, true)
    image(startPic, 0, 0, gridSize, gridSize)
    
    noStroke()
    fill(255, 255, 255, 191)
    rect(50, 50, 480, 110)
    textFont(font, 30)
    fill(5, 40, 96)
    text("Pirates are attacking you!", 80, 80, 440, 120)
    fill(255, 255, 255, 161)
    rect(50, 160, 480, 145)
    textFont(font, 20)
    fill(6, 48, 114)
    text("Slap them with the arrow keys.", 80, 180, 440, 240)
    text("Press 'M' to mute the music and 'N' to mute the soundeffects.", 80, 220, 440, 260) 
    // Level buttons
    stroke(5, 40, 96)
    fill(53, 83, 132, 131)
    rect(50, 315, 240, 70, 7)
    rect(50, 395, 240, 70, 7)
    rect(50, 475, 240, 70, 7)
    textFont(font, 30)
    fill(1, 34, 142)
    text("Level 1", 115, 325, 290, 385)
    text("Level 2", 115, 405, 290, 385)
    text("Level 3", 115, 485, 290, 385)
  }
  
  /* Draws the board with dock and the mermaid in the center.
   * Also goes through the enemies and draws them.
   */
  private def drawBoard = {
    for (i <- 0 until squares) {
        for (j <- 0 until squares) {
          if (i == middle || j == middle) {
            image(dPic, i * squareSize, j * squareSize)
            if (gameWorld.enemies(i)(j) == 1) {
              image(pPic, i * squareSize, j * squareSize)
            }
          }
        }
      }
      image(sPic, 0, 0)
      image(sPic, (middle + 1) * squareSize, 0)
      image(sPic, 0, (middle + 1) * squareSize)
      image(sPic, (middle + 1) * squareSize, (middle + 1) * squareSize)
      if (player.timeFromLastHit > 0) {
        player.dirOfLastHit match {
          case 0 => { 
            image(mAttackUp, middle * squareSize, middle * squareSize)
          }
          case 1 => { 
            image(mAttackRight, middle * squareSize, middle * squareSize)
          }
          case 2 => { 
            image(mAttackDown, middle * squareSize, middle * squareSize)
          }
          case 3 => { 
            image(mAttackLeft, middle * squareSize, middle * squareSize)
          }
          case _ => {
            image(mPic, middle * squareSize, middle * squareSize)
          }
        }
      } else image(mPic, middle * squareSize, middle * squareSize)
      if (!gameWorld.hasLost) {
        fill(255, 255, 255)
        text(s"Points: ${gameWorld.pointCount}", 100, 720, 400, 800)
      }
  }
  
  /*
   * Is used to draw the restart-button in the right place but with different
   * levels of opacity.
   */
  private def drawRestart(seeThroughness: Int) = {
    val font = createFont("Arial Black", 100, true)
    stroke(0, 0, 0)
    fill(0, 0, 0, seeThroughness)
    rect(360, 800, 180, 80, 7)
    textFont(font, 35)
    fill(255, 255, 255)
    text("Restart", 380, 812, 550, 900)
  }
  
  /* 
   * Draws the restart button, the achieved score and the loss screen. 
   */
  private def drawEnd = {
    image(cannedMermaidPic, 0, 0)
    fill(255, 255, 255)
    text(s"${gameWorld.pointCount}", 420, 720, 500, 800)
    drawRestart(191)
  }
  /*
   * Draws the restart button, the achieced score and the victory screen.
   */ 
  private def drawWin = {
    val font = createFont("Arial Black", 100, true)
    image(winningScreen, 0, 0)
    fill(225, 227, 232)
    textFont(font, 40)
    text("Congratulations, you managed to escape the evil pirates!", 100, 80, 600, 800)
    textFont(font, 30)
    fill(255, 255, 255)
    text("Swim free, little one!", 400, 300, 700, 500)
    drawRestart(191)
  }
  /* Checks if the cursor is over a level button. 
   * Changes the color of the button if it is.
   */
  private def checkIfLevelButton = {
    val font = createFont("Arial Black", 100, true)
      if (80 < mouseX && mouseX < 320) {
        if (315 < mouseY && mouseY < 385) {
          stroke(5, 40, 96)
          fill(53, 83, 132)
          rect(50, 315, 240, 70, 7)
          textFont(font, 30)
          fill(1, 34, 142)
          text("Level 1", 115, 325, 290, 385)
        } else if (395 < mouseY && mouseY < 465) {
          stroke(5, 40, 96)
          fill(53, 83, 132)
          rect(50, 395, 240, 70, 7)
          textFont(font, 30)
          fill(1, 34, 142)
          text("Level 2", 115, 405, 290, 385)
        }
          else if (475 < mouseY && mouseY < 545) {
          stroke(5, 40, 96)
          fill(53, 83, 132)
          rect(50, 475, 240, 70, 7)
          textFont(font, 30)
    			fill(1, 34, 142)
    			text("Level 3", 115, 485, 290, 385)
        }
      }
  }
  
  /* Checks if the cursor is over the restart button.
   * Changes the color of the button if the mouse is over it.
   */
  private def checkIfRestartButton = {
    if (360 < mouseX && mouseX < 540 && 
          800 < mouseY && mouseY < 880) {
      drawRestart(255)
    } else {
      drawBoard
      if (this.gameWorld.hasLost) drawEnd else drawWin
    }
  }
  
  override def mouseClicked() : Unit = {
    /* Reacts to the clicking of level buttons
     * 
     */
    if (stage == 0) {
      if (80 < mouseX && mouseX < 320) {
        if (315 < mouseY && mouseY < 385) {
          stage = 1
          soundPlayer1()
        } else if (395 < mouseY && mouseY < 465) {
          stage = 2
          soundPlayer2()
        }
        else if (475 < mouseY && mouseY < 545) {
          stage = 3
          soundPlayer3()
        }

      }
    /* Reacts to the clicking of the restart button
     * 
     */
    } else if (gameWorld.hasLost || gameWorld.hasWon) {
      if (360 < mouseX && mouseX < 540 && 
          800 < mouseY && mouseY < 880) {
        stage = 0 
        loop()
        gameWorld.boot()
        frameRate(30)
        endScreen = false
      }
    } 
  }
  
  /* 
   * Define everything that happens when the player attempts to hit an enemy.
   * 
   */
  private def hitNorth() = { 
    if(player.timeFromLastHit < 0 && stage != 0) {                     //Prevents the player from hitting too often and not in the menu screen.
      player.hit(0)                                                    //Kills whatever is in that direction
      image(mAttackUp, middle * squareSize, middle * squareSize)       //Grafics
      slapPlayer()                                                     //Sounds
      player.timeFromLastHit = levels.timeBetweenEachHit               //Frames between each hit.
    }
  }
  private def hitEast() = {
    if(player.timeFromLastHit < 0 && stage != 0) {
      player.hit(1)
      image(mAttackRight, middle * squareSize, middle * squareSize)
      slapPlayer()
      player.timeFromLastHit = levels.timeBetweenEachHit
      }
  }
  private def hitSouth() = {
    if(player.timeFromLastHit < 0 && stage != 0) {
      player.hit(2)
      image(mAttackDown, middle * squareSize, middle * squareSize)
      slapPlayer()
      player.timeFromLastHit = levels.timeBetweenEachHit
    }
  }
  private def hitWest() = {
    if(player.timeFromLastHit < 0 && stage != 0) {
      player.hit(3)
      image(mAttackLeft, middle * squareSize, middle * squareSize)
      slapPlayer()
      player.timeFromLastHit = levels.timeBetweenEachHit
    }
  }
  
  /*
   * Goes through the different commands that the player can give
   * by keyboard.
   */
  
  override def keyPressed() : Unit = {
    val e = keyCode
      e match {
        case 77 => {                                   //Mutes the music when M is pressed 
          if(!musicMuted){
            musicMuted = true
            pirateControl.setValue(true)
            bitPirateControl.setValue(true)
            speedUpPirateControl.setValue(true)
          } else {
            musicMuted = false
            pirateControl.setValue(false)
            bitPirateControl.setValue(false)
            speedUpPirateControl.setValue(false)
          }
        }
        case 78 => {                                   //Mutes the soundeffects when N is pressed
          if(!effectsMuted){
            effectsMuted = true
            slapControl.setValue(true)
            losingControl.setValue(true)
            winningControl.setValue(true)
          } else {
            effectsMuted = false
            slapControl.setValue(false)
            losingControl.setValue(false)
            winningControl.setValue(false)
          }
        }
        //wasd
        case 87 => hitNorth()
        case 68 => hitEast()
        case 83 => hitSouth()
        case 65 => hitWest()
        //arrow keys
        case 38 => hitNorth()
        case 39 => hitEast()
        case 40 => hitSouth()
        case 37 => hitWest()
          
        case _  => None
      }
  }
  
  /*
   * Defines the basics of the screen where the game appears.
   */
  def main(args: Array[String]) {
    val frame = new javax.swing.JFrame("Slap 'em All!")
    
    frame.getContentPane().add(this)
    init
    frame.setSize(this.gridSize, this.gridSize)
    frame.pack
    frame.setVisible(true)
    frame.setLocationRelativeTo(null)
    frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE)
  }
  
}
