import scala.swing._
import javax.swing.UIManager
import javax.swing.ImageIcon
import javax.imageio.ImageIO
import java.awt.Color
import java.awt.image.BufferedImage
import java.io.File
import javax.swing.event._
import processing.core._
import com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex
import javax.sound.sampled._

object SlapEmAll extends PApplet {
  
  val squareSize = 100
  val gameWorld = new World
  val player = new Player(gameWorld)
  private var speed = 30
  private var stage = 0
  
  val squares = gameWorld.BoardSize
  val gridSize = squares * squareSize
  val middle = squares / 2

  val mPic = loadImage("mermaidPic_burned.png")
  val pPic = loadImage("piraattiPicture_burned.png")
  val dPic = loadImage("dockPicture.png")
  val sPic = loadImage("seaPicture.png")
  val startPic = loadImage("startscreen.jpg")
  val mAttackLeft = loadImage("mermaidPic_left.png")
  val mAttackUp = loadImage("mermaidPic_up.png")
  val mAttackRight = loadImage("mermaidPic_right.png")
  
  override def setup() : Unit = {
    size(gridSize, gridSize)
    frameRate(60)
    
  }
  
  override def draw() : Unit = {
    if (stage == 0) {
      drawStart
    }
    if (stage == 1 || stage == 2) {
      if (stage == 1) {
        if(frameCount % speed == 0) {     // advances the game according the the frames
          gameWorld.advanceGame()
        }
      } else {
        if(frameCount % speed == 0) {     // advances the game according the the frames
          gameWorld.advanceGameDoubles()
        }
      }
      drawBoard
      // speeds up the game
      player.timeFromLastHit -= 1
      if (frameCount % 250 == 0) {
        frameRate(frameRate + 5)  
      } 
      if (gameWorld.hasLost) {
      drawEnd
      pirate.stop()
      pirate.setFramePosition(0)
      noLoop
      }
    }
  }
  
  private def drawStart = {
    val font = createFont("Arial Black", 100, true)
    image(startPic, 0, 0, gridSize, gridSize)
      textFont(font, 30)
      fill(255, 255, 255)
      text("You are stranded on a dock and evil pirates are trying to attack you", 50, 50, 400, 600)
      textFont(font, 25)
      fill(240, 240, 240)
      text("PRESS THE ARROW KEYS to slap them if they get too close!", 50, 250, 380, 500)
      textFont(font, 30)
      fill(0, 0, 0)
      text("Press 1 for level 1, or 2 for level 2", 50, 400, 330, 500)
  }
  
  private def drawBoard = {
    for (i <- 0 until squares) {
        for (j <- 0 until squares) {
          if (i == middle || j == middle) {
            image(dPic, i * squareSize, j * squareSize)
            if (gameWorld.enemies(i)(j).isDefined) {
              image(pPic, i * squareSize, j * squareSize)
            }
          }
        }
      }
      image(sPic, 0, 0)
      image(sPic, (middle + 1) * squareSize, 0)
      image(sPic, 0, (middle + 1) * squareSize)
      image(sPic, (middle + 1) * squareSize, (middle + 1) * squareSize)
      if (player.timeFromLastHit > 0) {
        player.dirOfLastHit match {
          case 0 => { 
            image(mAttackUp, middle * squareSize, middle * squareSize)
          }
          case 1 => { 
            image(mAttackRight, middle * squareSize, middle * squareSize)
          }
          case 2 => { 
            image(mPic, middle * squareSize, middle * squareSize)
          }
          case 3 => { 
            image(mAttackLeft, middle * squareSize, middle * squareSize)
          }
          case _ => {
            image(mPic, middle * squareSize, middle * squareSize)
          }
        }
      } else image(mPic, middle * squareSize, middle * squareSize)
      if (!gameWorld.hasLost) {
        fill(255, 255, 255)
        text(s"${gameWorld.pointCount}", 200, 600, 330, 500)
      }
  }
  
  private def drawEnd = {
    fill(255, 255, 255)
      text(s"You lost the game with ${gameWorld.pointCount} points! Restart by pressing space.", 50, 500, 330, 500)
  }
  
  override def keyPressed() : Unit = {
    val e = keyCode
   
        e match {
        //Mutes the game when M is pressed 
        case 77 => {
        if(!muted){
          muted = true
          pirateControl.setValue(true)
        }else{
          muted = false
          pirateControl.setValue(false)
        }
      }
        case 78 => {
        if(!slapMuted){
          slapMuted = true
          slapControl.setValue(true)
        }else{
          slapMuted = false
          slapControl.setValue(false)
        }
      }
        
        //restarts the game when SPACE is pressed  
          case 32 => {
            if (gameWorld.hasLost){
              stage = 0 
              loop()
              gameWorld.boot()
              frameRate(60)
            }
          }
        //the game starts when 1 or 2 is pressed
          case 49 => { stage = 1; soundPlayer() } 
          case 50 => { stage = 2; soundPlayer() }
        //arrow keys
          case 38 => { 
            if(player.timeFromLastHit < 0) {
              player.hit(0);println("up")
              image(mAttackUp, middle * squareSize, middle * squareSize)
              slapPlayer()
              player.timeFromLastHit = 15
            }
          }
          case 39 => {
            if(player.timeFromLastHit < 0) {
              player.hit(1);println("right")
              image(mAttackRight, middle * squareSize, middle * squareSize)
              slapPlayer()
              player.timeFromLastHit = 15
            }
          }
          case 40 => {
            if(player.timeFromLastHit < 0) {
              player.hit(2)
              slapPlayer()
              player.timeFromLastHit = 15
              }
            }
          case 37 => {
            if(player.timeFromLastHit < 0) {
              player.hit(3);println("left")
              image(mAttackLeft, middle * squareSize, middle * squareSize)
              slapPlayer()
              player.timeFromLastHit = 15
            }
          }
          case _ => None
    }
  }
  
  //Sounds of the game  
    // Background sound
    private var muted = false
    private val pirateFile = new File("pirate.wav")
    private val pirateIn = AudioSystem.getAudioInputStream(pirateFile)
    private var pirate = AudioSystem.getClip()
    pirate.open(pirateIn)
    //Thread.sleep(12000)
    
    // Plays background sound
    private def soundPlayer() = {
      pirate.loop(Clip.LOOP_CONTINUOUSLY) 
    }
    
    //Soundeffects
    private var slapMuted = false
    private val slapFile = new File("slap.wav")
    private val slapIn = AudioSystem.getAudioInputStream(slapFile)
    private var slap = AudioSystem.getClip()
    slap.open(slapIn)
    
    //Plays soundeffect
    private def slapPlayer() = {
      slap.setFramePosition(0)
      slap.start()
    }
    
    //Muting sound
    private val pirateControl: BooleanControl = pirate.getControl(BooleanControl.Type.MUTE).asInstanceOf[BooleanControl]
    private val slapControl: BooleanControl = slap.getControl(BooleanControl.Type.MUTE).asInstanceOf[BooleanControl]
        
    
  def main(args: Array[String]) {
    val frame = new javax.swing.JFrame("Slap 'em All!")
    
    frame.getContentPane().add(this)
    init
    frame.setSize(this.gridSize, this.gridSize)
    frame.pack
    frame.setVisible(true)
    frame.setLocationRelativeTo(null)
    frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE)
  }
  
}
