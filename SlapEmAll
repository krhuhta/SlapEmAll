import scala.swing._
import javax.swing.UIManager
import javax.swing.ImageIcon
import javax.imageio.ImageIO
import java.awt.Color
import java.awt.image.BufferedImage
import java.io.File
import javax.swing.event._
import processing.core._
import com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex

object SlapEmAll extends PApplet {
  
  val squareSize = 100
  val gameWorld = new World
  val player = new Player(gameWorld)
  private var speed = 30
  
  val squares = gameWorld.BoardSize
  val gridSize = squares * squareSize
  val middle = squares / 2

  val mPic = loadImage("mermaidPic_burned.png")
  val pPic = loadImage("piraattiPicture_burned.png")
  val dPic = loadImage("dockPicture.png")
  val sPic = loadImage("seaPicture.png")
  
  override def setup() : Unit = {
    size(gridSize, gridSize)
    frameRate(60)
    
  }
  
  override def draw() : Unit = {
    //TODO: sitten kun fontti tarvitaan, tässä on kehys: val font = createFont("Arial Black", 50, true)  // The font to be used in the end /
    
    //Draws the gameboard with dock and water. Adds the mermaid (player), too.
    if(frameCount % speed == 0) {     // advances the game according the the frames
      gameWorld.advanceGame()
      println(".")
    }
    for (i <- 0 until squares) {
      for (j <- 0 until squares) {
        if (i == middle || j == middle) {
          image(dPic, i * squareSize, j * squareSize)
          if (gameWorld.enemies(i)(j).isDefined) {
            image(pPic, i * squareSize, j * squareSize)
          }
        }
      }
    }
    image(sPic, 0, 0)
    image(sPic, (middle + 1) * squareSize, 0)
    image(sPic, 0, (middle + 1) * squareSize)
    image(sPic, (middle + 1) * squareSize, (middle + 1) * squareSize)
    image(mPic, middle * squareSize, middle * squareSize)
    if (gameWorld.hasLost) {
      println("You Lost")
      noLoop
    }
    
  }
  override def keyPressed() : Unit = {
    val e = keyCode
      e match {
      //wasd
        case 87 => { player.hit(0);println("up")}
        case 68 => { player.hit(1);println("right")}
        case 83 => { player.hit(2);println("down")}
        case 65 => { player.hit(3);println("left")}
      //arrow keys
        case 38 => { player.hit(0);println("up")}
        case 39 => { player.hit(1);println("right")}
        case 40 => { player.hit(2);println("down")}
        case 37 => { player.hit(3);println("left")}
    }
  }
  def main(args: Array[String]) {
    val frame = new javax.swing.JFrame("Slap 'em All!")
    
    frame.getContentPane().add(this)
    init
    frame.setSize(this.gridSize, this.gridSize)
    frame.pack
    frame.setVisible(true)
    frame.setLocationRelativeTo(null)
    frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE)
  }
  
}
