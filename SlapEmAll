import java.io.File
import javax.swing.event._
import processing.core._
import com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex
import javax.sound.sampled._

object SlapEmAll extends PApplet {
  
  val squareSize = 100
  val gameWorld = new World
  val player = new Player(gameWorld)
  private var speed = 0               //The numebr of frames in between each pirate spawn. Value assinged at the start of each level
  private var stage = 0               //Stage 0 is the menu
  private var endScreen = false       //Are we currently at the endScreen?
  
  val squares = gameWorld.BoardSize
  val gridSize = squares * squareSize
  val middle = squares / 2
  
  /*
   * All the sprites for the game are loaded
   */
  val mPic = loadImage("mermaidPic_burned.png")
  val pPic = loadImage("piraattiPicture_burned.png")
  val dPic = loadImage("dockPicture.png")
  val sPic = loadImage("seaPicture.png")
  val startPic = loadImage("startscreen.jpg")
  val mAttackLeft = loadImage("mermaidPic_left.png")
  val mAttackUp = loadImage("mermaidPic_up.png")
  val mAttackRight = loadImage("mermaidPic_right.png")
  val mAttackDown = loadImage("mermaidPic_down.png")
  val cannedMermaidPic = loadImage("endingPic.png")
  
  override def setup() : Unit = {
    size(gridSize, gridSize)
    frameRate(60)
    
  }
  private def spawn() = {
    if(frameCount % speed == 0) {     // advances the game according the the frames
      gameWorld.newEnemy()
    }
  }
  private def move() = {
    if(frameCount % speed == 0) {     // advances the game according the the frames
      gameWorld.advanceEnemies()
    }
  }
  private def addPoints() = {
    if(frameCount % speed == 0) {     // advances the game according the the frames
      gameWorld.addPoints()
    }
  }
  override def draw() : Unit = {
    if (!gameWorld.hasLost) {
      if (stage == 0) {
        drawStart
        this.checkIfLevelButton
      }
      if (stage == 1 || stage == 2 || stage == 3) {
        if (stage == 1) {
          speed = 30
          if(frameCount % speed == 0) {     // advances the game according the the frames
            gameWorld.advanceGame()
          } 
          if (frameCount % 250 == 0) {
            frameRate(frameRate + 5)        // speeds up the game
          } 
        } else if (stage == 2) {
          speed = 24
          if(frameCount % speed == 0) {     // advances the game according the the frames
            gameWorld.advanceGame()
          } 
        } else {
          speed = 24
          move()
          if (gameWorld.pointCount >= 0    && gameWorld.pointCount <= 590)  spawn()
          if (gameWorld.pointCount >= 640  && gameWorld.pointCount <= 1240) spawn()
          if (gameWorld.pointCount >= 1280 && gameWorld.pointCount <= 2470) spawn()
          if (gameWorld.pointCount >= 2550 && gameWorld.pointCount <= 3000) spawn()
          if (gameWorld.pointCount >= 3080 && gameWorld.pointCount <= 4070) spawn()
          addPoints()
          gameWorld.checkIfLost()
          if (gameWorld.pointCount == 620 || gameWorld.pointCount == 1271 || gameWorld.pointCount == 2502 || gameWorld.pointCount == 3043) {
            frameRate((frameRate*1.14f).toInt)
            gameWorld.addOnePoint
          }
          
        }
        drawBoard
        player.timeFromLastHit -= 1
        
      }
    } else {
        if (!endScreen) {
          drawEnd
          pirate.stop()
          pirate.setFramePosition(0)
          bitPirate.stop()
          bitPirate.setFramePosition(0)
          speedUpPirate.stop()
          speedUpPirate.setFramePosition(0)
        }
        endScreen = true
        this.checkIfRestartButton
    }
  }
  
  /* 
   * Draws the welcome screen where the player sees the instructions
   * and can choose a level to play.
   */
  private def drawStart = {
    val font = createFont("Arial Black", 100, true)
    image(startPic, 0, 0, gridSize, gridSize)
    
    noStroke()
    fill(255, 255, 255, 191)
    rect(50, 50, 480, 110)
    textFont(font, 30)
    fill(5, 40, 96)
    text("Pirates are attacking you!", 80, 80, 440, 120)
    fill(255, 255, 255, 161)
    rect(50, 160, 480, 145)
    textFont(font, 20)
    fill(6, 48, 114)
    text("Slap them with the arrow keys.", 80, 180, 440, 240)
    text("Press 'M' to mute the music and 'N' to mute the soundeffects.", 80, 220, 440, 260) 
    // Level buttons
    stroke(5, 40, 96)
    fill(53, 83, 132, 131)
    rect(50, 315, 240, 70, 7)
    rect(50, 395, 240, 70, 7)
    rect(50, 475, 240, 70, 7)
    textFont(font, 30)
    fill(1, 34, 142)
    text("Level 1", 115, 325, 290, 385)
    text("Level 2", 115, 405, 290, 385)
    text("Level 3", 115, 485, 290, 385)
  }
  
  /* Draws the board with dock and the mermaid in the center.
   * Also goes through the enemies and draws them.
   */
  private def drawBoard = {
    for (i <- 0 until squares) {
        for (j <- 0 until squares) {
          if (i == middle || j == middle) {
            image(dPic, i * squareSize, j * squareSize)
            if (gameWorld.enemies(i)(j).isDefined) {
              image(pPic, i * squareSize, j * squareSize)
            }
          }
        }
      }
      image(sPic, 0, 0)
      image(sPic, (middle + 1) * squareSize, 0)
      image(sPic, 0, (middle + 1) * squareSize)
      image(sPic, (middle + 1) * squareSize, (middle + 1) * squareSize)
      if (player.timeFromLastHit > 0) {
        player.dirOfLastHit match {
          case 0 => { 
            image(mAttackUp, middle * squareSize, middle * squareSize)
          }
          case 1 => { 
            image(mAttackRight, middle * squareSize, middle * squareSize)
          }
          case 2 => { 
            image(mAttackDown, middle * squareSize, middle * squareSize)
          }
          case 3 => { 
            image(mAttackLeft, middle * squareSize, middle * squareSize)
          }
          case _ => {
            image(mPic, middle * squareSize, middle * squareSize)
          }
        }
      } else image(mPic, middle * squareSize, middle * squareSize)
      if (!gameWorld.hasLost) {
        fill(255, 255, 255)
        text(s"Points: ${gameWorld.pointCount}", 100, 720, 400, 800)
      }
  }
  
  private def drawRestart(seeThroughness: Int) = {
    val font = createFont("Arial Black", 100, true)
    stroke(0, 0, 0)
    fill(0, 0, 0, seeThroughness)
    rect(360, 800, 180, 80, 7)
    textFont(font, 35)
    fill(255, 255, 255)
    text("Restart", 380, 812, 550, 900)
  }
  
  /* Draws the restart button and the achieved score.
   * 
   */
  private def drawEnd = {
    image(cannedMermaidPic, 0, 0)
    fill(255, 255, 255)
    text(s"${gameWorld.pointCount}", 420, 720, 500, 800)
    drawRestart(191)
  }
  
  /* Checks if the cursor is over a level button. 
   * Changes the color of the button if it is.
   */
  private def checkIfLevelButton = {
    val font = createFont("Arial Black", 100, true)
      if (80 < mouseX && mouseX < 320) {
        if (315 < mouseY && mouseY < 385) {
          stroke(5, 40, 96)
          fill(53, 83, 132)
          rect(50, 315, 240, 70, 7)
          textFont(font, 30)
          fill(1, 34, 142)
          text("Level 1", 115, 325, 290, 385)
        } else if (395 < mouseY && mouseY < 465) {
          stroke(5, 40, 96)
          fill(53, 83, 132)
          rect(50, 395, 240, 70, 7)
          textFont(font, 30)
          fill(1, 34, 142)
          text("Level 2", 115, 405, 290, 385)
        }
          else if (475 < mouseY && mouseY < 545) {
          stroke(5, 40, 96)
          fill(53, 83, 132)
          rect(50, 475, 240, 70, 7)
          textFont(font, 30)
    			fill(1, 34, 142)
    			text("Level 3", 115, 485, 290, 385)
        }
      }
  }
  
  /* Checks if the cursor is over the restart button.
   * Changes the color of the button if the mouse is over it.
   */
  private def checkIfRestartButton = {
    if (360 < mouseX && mouseX < 540 && 
          800 < mouseY && mouseY < 880) {
      drawRestart(255)
    } else {
      drawBoard
      drawEnd
    }
  }
  
  override def mouseClicked() : Unit = {
    /* Reacts to the clicking of level buttons
     * 
     */
    if (stage == 0) {
      if (80 < mouseX && mouseX < 320) {
        if (315 < mouseY && mouseY < 385) {
          stage = 1
          soundPlayer()
        } else if (395 < mouseY && mouseY < 465) {
          stage = 2
          soundPlayer2()
        }
        else if (475 < mouseY && mouseY < 545) {
          stage = 3
          soundPlayer3()
        }

      }
    /* Reacts to the clicking of the restart button
     * 
     */
    } else if (gameWorld.hasLost) {
      if (360 < mouseX && mouseX < 540 && 
          800 < mouseY && mouseY < 880) {
        stage = 0 
        loop()
        gameWorld.boot()
        frameRate(60)
        endScreen = false
      }
    }
    
  }
  
  override def keyPressed() : Unit = {
    val e = keyCode
   
        e match {
        //Mutes the music when M is pressed 
        case 77 => {
        if(!muted){
          muted = true
          pirateControl.setValue(true)
          bitPirateControl.setValue(true)
          speedUpPirateControl.setValue(true)
        }else{
          muted = false
          pirateControl.setValue(false)
          bitPirateControl.setValue(false)
          speedUpPirateControl.setValue(false)
        }
      }
        //Mutes the soundeffects when N is pressed
        case 78 => {
        if(!slapMuted){
          slapMuted = true
          slapControl.setValue(true)
        }else{
          slapMuted = false
          slapControl.setValue(false)
        }
      }
        
        //arrow keys
          case 38 => { 
            if(player.timeFromLastHit < 0) {
              player.hit(0)
              image(mAttackUp, middle * squareSize, middle * squareSize)
              slapPlayer()
              player.timeFromLastHit = 15
            }
          }
          case 39 => {
            if(player.timeFromLastHit < 0) {
              player.hit(1)
              image(mAttackRight, middle * squareSize, middle * squareSize)
              slapPlayer()
              player.timeFromLastHit = 15
            }
          }
          case 40 => {
            if(player.timeFromLastHit < 0) {
              player.hit(2)
              image(mAttackDown, middle * squareSize, middle * squareSize)
              slapPlayer()
              player.timeFromLastHit = 15
              }
            }
          case 37 => {
            if(player.timeFromLastHit < 0) {
              player.hit(3)
              image(mAttackLeft, middle * squareSize, middle * squareSize)
              slapPlayer()
              player.timeFromLastHit = 15
            }
          }
          case _ => None
    }
  }
  
  //Sounds of the game  
  /*
   * level 1 music
   */
  private var muted = false
  private val pirateFile = new File("pirate.wav")
  private val pirateIn = AudioSystem.getAudioInputStream(pirateFile)
  private var pirate = AudioSystem.getClip()
  pirate.open(pirateIn)
  /*
   * level 2 music
   */
  private val bitPirateFile = new File("BitPirates.wav")
  private val bitPirateIn = AudioSystem.getAudioInputStream(bitPirateFile)
  private var bitPirate = AudioSystem.getClip()
  bitPirate.open(bitPirateIn)
   /*
   * level 3 music
   */
  private val speedUpPirateFile = new File("SpeedUpPirates.wav")
  private val speedUpPirateIn = AudioSystem.getAudioInputStream(speedUpPirateFile)
  private var speedUpPirate = AudioSystem.getClip()
  speedUpPirate.open(speedUpPirateIn)
  
  /** Plays background sound
  */
  private def soundPlayer() = {
    pirate.loop(Clip.LOOP_CONTINUOUSLY) 
  }
  private def soundPlayer2() = {
    bitPirate.loop(Clip.LOOP_CONTINUOUSLY) 
  }
  private def soundPlayer3() = {
    speedUpPirate.loop(Clip.LOOP_CONTINUOUSLY) 
  }
    
  //Soundeffects
  private var slapMuted = false
  private val slapFile = new File("slap.wav")
  private val slapIn = AudioSystem.getAudioInputStream(slapFile)
  private var slap = AudioSystem.getClip()
  slap.open(slapIn)
    
  /**Plays soundeffect
  */
  private def slapPlayer() = {
    slap.setFramePosition(0)
    slap.start()
  }
    
  /*
   * Muting sounds
   */
  private val pirateControl       : BooleanControl = pirate.       getControl(BooleanControl.Type.MUTE).asInstanceOf[BooleanControl]
  private val slapControl         : BooleanControl = slap.         getControl(BooleanControl.Type.MUTE).asInstanceOf[BooleanControl]
  private val bitPirateControl    : BooleanControl = bitPirate.    getControl(BooleanControl.Type.MUTE).asInstanceOf[BooleanControl]
  private val speedUpPirateControl: BooleanControl = speedUpPirate.getControl(BooleanControl.Type.MUTE).asInstanceOf[BooleanControl]
   
  def main(args: Array[String]) {
    val frame = new javax.swing.JFrame("Slap 'em All!")
    
    frame.getContentPane().add(this)
    init
    frame.setSize(this.gridSize, this.gridSize)
    frame.pack
    frame.setVisible(true)
    frame.setLocationRelativeTo(null)
    frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE)
  }
  
}
